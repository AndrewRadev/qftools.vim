*qftools.txt*	Tools to manipulate the contents of the quickfix window

==============================================================================
CONTENTS                                        *qftools*   *qftools-contents*

    Installation................................: |qftools-installation|
    Usage.......................................: |qftools-usage|
    Settings....................................: |qftools-settings|
    Internals...................................: |qftools-internals|
    Issues......................................: |qftools-issues|


==============================================================================
INSTALLATION                                            *qftools-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/qftools.vim.git ~/.vim/bundle/qftools
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/qftools.vim.git bundle/qftools
<

Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, ftplugin, plugin.


==============================================================================
USAGE                                                          *qftools-usage*

This plugin provides various commands and mappings to work with the contents
of the quickfix window.

Append, sort, merge ~

If you've executed a grep/ack command and you have a bunch of stuff in your
quickfix window, but want to add another grep to it, this could help:
>
    :Ack ProjectCollaborator
    :Qfappend Ack UserCollaborator
<
This will add the new search results to the end of the quickfix list, instead
of replacing it. You could also swap the order by using `:Qfprepend`:
>
    :Ack ProjectCollaborator
    :Qfprepend Ack UserCollaborator
<
Duplicates should automatically be removed (two hits on the same line in the
same file). However, the order is going to be the exact order of the first
list + second list. To sort the current quickfix list alphabetically on the
filename, use `:Qfsort`:
>
    :Ack ProjectCollaborator
    :Qfappend Ack UserCollaborator
    :Qfsort
<
You can also provide `:Qfsort` with a command and it'll execute that first,
allowing you to do:
>
    :Ack ProjectCollaborator
    :Qfsort Qfappend Ack UserCollaborator
<
The same commands are available without the "Qf" prefix within the actual buffer:
>
    :Append
    :Prepend
    :Sort
    :Merge
<

Filtering entries ~

The plugin defines commands to remove lines by pattern:
                                                                             >
    :RemoveText <some-pattern> -> matches the text entries
    :RemoveFile <some-pattern> -> matches the file entries
<
You can also do the opposite and only keep files/text entries matching a
particular pattern:
>
    :KeepText <some-pattern>
    :KeepFile <some-pattern>
<
As an example, if you're searching for some code that gives you results in
both javascript and handlebars files, you can remove all files with the `.hbs`
extension from the quickfix list like so:
>
    :RemoveFile \.hbs$
<
Alternatively, you can keep only javascript files with:
>
    :KeepFile \.js$
<
This way, you can filter out test files, or narrow down the pattern you
searched for within the found matches.

If you'd like to just remove, or keep, a range of lines, you can use these two
commands:
>
    <start>,<end>RemoveLines
    <start>,<end>KeepLines
<
The range is a perfectly normal |range|, so visual mode works with both of
these. You can mark a visual-mode selection and run `:RemoveLines` to remove
the selection from the quickfix window.

You can disable these commands by setting |g:qftools_no_buffer_commands| to 1.

You can also use the |d| mapping similar to the built-in one:

- |dd| removes a single line
- visual-mode d (|v_d|) removes the selected lines
- |d|{motion} deletes the lines affected by the motion (for instance, dG would
  delete all lines till the end of the buffer)

You can "undo" and "redo" deletions by using |u| and |<c-r>|. These mappings
are not as powerful as Vim's built-in undo mechanism, but they should work
mostly as expected. Currently, all they do is provide a thin wrapper to
|:colder| and |:cnewer|.

You can disable these mappings by setting |g:qftools_no_buffer_mappings| to 1.

Open mappings ~

There are buffer-specific mappings defined that help you open files in
different ways:

- `o` opens the file the same way as `<cr>`, but it's closer to the home row
- `t` opens the file in a new tab
- `T` opens the file in a new tab, without switching to it
- `i` opens the file in a new horizontal split
- `S` opens the file in a new vertical split

They've been taken pretty much as-is from the ack.vim plugin (https://github.com/mileszs/ack.vim). You can disable them by setting |g:qftools_no_buffer_mappings| to 1.


==============================================================================
SETTINGS                                                      *qftools-settings*

                                                  *g:qftools_no_buffer_commands*
>
    let g:qftools_no_buffer_commands = 1
<
Default value: 0

Setting this to 1 disables the buffer-specific commands defined in the
quickfix window. You can still use mappings, global commands, or the
autoloaded functions to make use of the plugin.

                                                  *g:qftools_no_buffer_mappings*
>
    let g:qftools_no_buffer_mappings = 1
<
Default value: 0

Setting this to 1 disables the buffer-specific mappings defined in the
quickfix window. You can still use the buffer-specific and global commands, or
the autoloaded functions to make use of the plugin.


==============================================================================
INTERNALS                                                  *qftools-internals*

TODO

==============================================================================
ISSUES                                                        *qftools-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/qftools.vim/issues


vim:tw=78:sw=4:ft=help:norl:
